
<div id="map"></div>

<script type="text/javascript" src="<%= static_path(@conn, "/js/d3.v3.js") %>"></script>
<script>
var landmap = <%= raw Poison.encode!(@map, pretty: true) %>;
var mapSquareSide = Math.max(landmap.width, landmap.height)
var svgLongerSide = 320
var conf = {
	svg: {width: svgLongerSide, height: svgLongerSide},
	marginCells: {topbottom: 3, leftright: 3},
margin: {/* below */}
}
var cellScale = d3.scale.linear()
	.domain([0, mapSquareSide])
	.range([0, svgLongerSide])

conf.margin.topbottom = cellScale(conf.marginCells.topbottom)
conf.margin.leftright = cellScale(conf.marginCells.leftright)

conf.svg.center = {
	x: conf.margin.leftright + Math.round(cellScale(landmap.width) / 2),
	y: conf.margin.topbottom + Math.round(cellScale(landmap.height) / 2),
}

var baseColor = d3.rgb(200,200,210)
// var outerColor = d3.rgb(240,240,255)
// var outerColor = 'white'
var outerColor = baseColor
var flashingColor = d3.rgb(100,100,100)

var svg = d3.select('#map').append('svg')
	.attr({
		// width: cellScale(landmap.width) + conf.margin.leftright * 2,
		// height: cellScale(landmap.height) + conf.margin.topbottom * 2
		width: 1000, height: 1000
	})
	.append('g')
	.attr({
		transform: 'translate('+conf.margin.leftright+','+conf.margin.topbottom+')'
		// transform: 'translate('+conf.margin.leftright+','+conf.margin.topbottom+') rotate(210,'+conf.svg.center.x+','+conf.svg.center.y+') skewX(-30) scale(1,.864)'
		// skewX(-30) rotate(1)
	})

// function cellScaleWith(k) {
// 	return function(d) {
// 		return cellScale(d[k])
// 	}
// }

// var regions = svg.selectAll('rect.fdp_region').data(landmap.regions)
// regions.enter().append('rect').classed('fdp_region', true)
// regions.attr({
// 	x: cellScaleWith('x'),
// 	y: cellScaleWith('y'),
// 	width: cellScaleWith('width'),
// 	height: cellScaleWith('height'),
// })

var ANIM_EXPAND_DURATION = 0
var ANIM_PAUSE_BEFORE_EXPAND = 0
var ANIM_PAUSE_BEFORE_REGION = 0
var ANIM_RECT_COLOR_FADE = 0

function after(time, fn, a, b, c, d, e, f) {
	if (time > 0)
		setTimeout(fn, time, a, b, c, d, e, f)
	else
		fn(a, b, c, d, e, f)
}

function initRegionRect(attrs, region, debug_index) {
	var rect = svg.append('rect')
	.classed('region', 1)
	.classed('biome-'+region.biome, 1)
	.classed('temperate', region.climate === 'temperate')
	.classed('tropical', region.climate === 'tropical')
	.classed('polar', region.climate === 'polar')
	.classed('outland', region.outland)
	.attr({
		x: cellScale(attrs.x), y: cellScale(attrs.y), width: 0, height:0,
		opacity: 0
	})
	.attr({width: cellScale(attrs.width), height: cellScale(attrs.height)})
	after(1, function(){
		rect
			.transition()
			.duration(ANIM_RECT_COLOR_FADE) // during first expand
			.attr({
				opacity: 1
			})
	})
	// svg.append('text')
		// .text(debug_index)
		// .attr({x: cellScale(region.x), y: cellScale(region.y + 0.5)})
	return rect
}

function expandRegionRect(rect, attrs) {
	rect
		// .transition()
		// .interrupt()
		// .transition()
		// .duration(ANIM_EXPAND_DURATION)
		.attr({
			x:  cellScale(attrs.x),
			y:  cellScale(attrs.y),
			width:  cellScale(attrs.width),
			height: cellScale(attrs.height)
		})
}


function expandRegionShape(dimensions, side) {
	if (side === 'left') {
		dimensions.x -= 1
		dimensions.width += 1
	} else if (side === 'right') {
		dimensions.width += 1
	} else if (side === 'top') {
		dimensions.y -= 1
		dimensions.height += 1
	} else if (side === 'bottom') {
		dimensions.height += 1
	} else {
		throw new Error ('Cannot expand side ' + side)
	}
	return dimensions
}

function loopRegions(regIndex) {after(ANIM_PAUSE_BEFORE_REGION, function(){
	if (landmap.regions[regIndex] === void 0)
		return
	var region = landmap.regions[regIndex]
	var expands = region.debug_expand_steps

	var rectDims = {
		x: region.debug_creation_cell.x,
		y: region.debug_creation_cell.y,
		width: 1,
		height: 1
	}
	var rect = initRegionRect(rectDims, region, regIndex)

	function loopExpands(expIndex) {after(ANIM_PAUSE_BEFORE_EXPAND + ANIM_EXPAND_DURATION, function(){
		if (expands[expIndex] === void 0) {
			return loopRegions(regIndex + 1)
		}
		var side = expands[expIndex]
		rectDims = expandRegionShape(rectDims, side)
		expandRegionRect(rect, rectDims)
		loopExpands(expIndex + 1)
	})}
	loopExpands(0)
})}

loopRegions(0)


</script>
<style type="text/css">
	rect.region {
		stroke: none;
		stroke-width: 1px;
	}
	rect.biome-chasm {fill:     Black }
    rect.biome-volcano {fill:   Coral }
    rect.biome-ocean {fill:     CornflowerBlue  }
    body {background:           CornflowerBlue  }
    rect.biome-lake {fill:      DarkCyan }
    rect.biome-mountains {fill: DarkGrey }
    rect.biome-ice {fill:       Cornsilk }
    rect.biome-taiga {fill:     Aquamarine }
    rect.biome-tundra {fill:    LightGreen }
    rect.biome-mojave {fill:    SandyBrown }
    rect.biome-woods {fill:     ForestGreen }
    rect.biome-country {fill:   YellowGreen }
    rect.biome-swamp {fill:     Olive}
    rect.biome-sahara {fill:    Khaki }
    rect.biome-jungle {fill:    OliveDrab }
    rect.biome-savana {fill:    Peru }
    rect.biome-mangrove {fill:  Teal }
</style>
