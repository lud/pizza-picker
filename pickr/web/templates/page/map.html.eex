
<div id="map"></div>

<script type="text/javascript" src="<%= static_path(@conn, "/js/d3.v3.js") %>"></script>
<script>
var landmap = <%= raw Poison.encode!(@map, pretty: true) %>;
var mapSquareSide = Math.max(landmap.width, landmap.height)
var svgLongerSide = 200
var conf = {
	svg: {width: svgLongerSide, height: svgLongerSide},
	marginCells: {top: 3, left: 3, bottom: 3, right: 3},
margin: {/* below */}
}
var cellScale = d3.scale.linear()
	.domain([0, mapSquareSide])
	.range([0, svgLongerSide])

conf.margin.top = cellScale(conf.marginCells.top)
conf.margin.left = cellScale(conf.marginCells.left)
conf.margin.bottom = cellScale(conf.marginCells.bottom)
conf.margin.right = cellScale(conf.marginCells.right)

var baseColor = d3.rgb(200,200,210)
// var outerColor = d3.rgb(240,240,255)
// var outerColor = 'white'
var outerColor = baseColor
var flashingColor = d3.rgb(100,100,100)

var svg = d3.select('#map').append('svg')
	.attr({
		width: cellScale(landmap.width) + conf.margin.left + conf.margin.right,
		height: cellScale(landmap.height) + conf.margin.top + conf.margin.bottom
	})
	.append('g')
	.attr({
		transform: 'translate('+conf.margin.left+','+conf.margin.top+')'
	})

// function cellScaleWith(k) {
// 	return function(d) {
// 		return cellScale(d[k])
// 	}
// }

// var regions = svg.selectAll('rect.fdp_region').data(landmap.regions)
// regions.enter().append('rect').classed('fdp_region', true)
// regions.attr({
// 	x: cellScaleWith('x'),
// 	y: cellScaleWith('y'),
// 	width: cellScaleWith('width'),
// 	height: cellScaleWith('height'),
// })

var ANIM_PAUSE_BEFORE_REGION =10
var ANIM_EXPAND_DURATION =10
var ANIM_PAUSE_BEFORE_EXPAND =10

function after(time, fn, a, b, c, d, e, f) {
	if (time > 0)
		setTimeout(fn, time, a, b, c, d, e, f)
	else
		fn(a, b, c, d, e, f)
}

function initRegionRect(attrs, finalRegion, debug_index) {
	var rect = svg.append('rect')
	.classed('region', 1)
	.attr({
		x: cellScale(attrs.x), y: cellScale(attrs.y), width: 0, height:0,
		fill: flashingColor
	})
	.attr({width: cellScale(attrs.width), height: cellScale(attrs.height)})
	// svg.append('text')
		// .text(debug_index)
		// .attr({x: cellScale(finalRegion.x), y: cellScale(finalRegion.y + 0.5)})
	return rect
}

function expandRegionRect(rect, attrs) {
	rect
		// .transition()
		// .interrupt()
		// .transition()
		// .duration(ANIM_EXPAND_DURATION)
		.attr({
			x:  cellScale(attrs.x),
			y:  cellScale(attrs.y),
			width:  cellScale(attrs.width),
			height: cellScale(attrs.height)
		})
}

function fadeRegionRectColor(rect, region) {
	var color = isOuterRegion(region) ? outerColor : baseColor
	rect.transition()
		.attr({fill: color})
}

function isOuterRegion(region) {
	if (region.x === 0 || region.y === 0)
		return true
	if (region.x + region.width === landmap.width)
		return true
	if (region.y + region.height === landmap.height)
		return true
	return false
}

function expandRegionShape(dimensions, side) {
	if (side === 'left') {
		dimensions.x -= 1
		dimensions.width += 1
	} else if (side === 'right') {
		dimensions.width += 1
	} else if (side === 'top') {
		dimensions.y -= 1
		dimensions.height += 1
	} else if (side === 'bottom') {
		dimensions.height += 1
	} else {
		throw new Error ('Cannot expand side ' + side)
	}
	return dimensions
}

function loopRegions(regIndex) {after(ANIM_PAUSE_BEFORE_REGION, function(){
	if (landmap.regions[regIndex] === void 0)
		return
	var region = landmap.regions[regIndex]
	var expands = region.debug_expand_steps

	var rectDims = {
		x: region.debug_creation_cell.x,
		y: region.debug_creation_cell.y,
		width: 1,
		height: 1
	}
	var rect = initRegionRect(rectDims, region, regIndex)

	function loopExpands(expIndex) {after(ANIM_PAUSE_BEFORE_EXPAND + ANIM_EXPAND_DURATION, function(){
		if (expands[expIndex] === void 0) {
			fadeRegionRectColor(rect, region)
			return loopRegions(regIndex + 1)
		}
		var side = expands[expIndex]
		rectDims = expandRegionShape(rectDims, side)
		expandRegionRect(rect, rectDims)
		loopExpands(expIndex + 1)
	})}
	loopExpands(0)
})}

loopRegions(0)


</script>
<style type="text/css">
	rect.fdp_region {
		stroke: white;
		stroke-width: 1px;
		fill: #ccc;
	}
	rect.region {
		stroke: white;
		stroke-width: 1px;
	}
</style>
